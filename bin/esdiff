#!/usr/bin/env node

var esprima = require('esprima')
var escodegen = require('escodegen')
var fs = require('fs')
var ansidiff = require('ansidiff')
var _ = require('underscore')

if (process.argv.length !== 5) {
    console.log('')
    console.log('Usage: esdiff comparison file1.js file2.js')
    console.log('')
    console.log(prefixLines('@param comparison: --chars | --words | --lines | --css', '    '))
    console.log('')
    console.log(prefixLines('Example: esdiff --chars file1.js file2.js', '    '))
    console.log('')
    return;
}

var comparison = process.argv[2]
if (/^--(?:chars|words|lines|css)$/.test(comparison)) {
    comparison = comparison.replace(/--/g, '')
} else {
    comparison = 'words'
}

var filenames = [process.argv[3], process.argv[4]]
var codes = _.map(filenames, readIt)
var asts = _.map(codes, toAst)
var normalized_codes = _.map(asts, toCode)
var prettyDiff = ansidiff[comparison].apply(ansidiff, normalized_codes)

console.log('')
console.log('Comparing: ' + filenames.join(', '))
console.log(repeatStr('-', 80))
console.log(prefixLines(prettyDiff, '    '));
console.log(repeatStr('-', 80))
console.log('')


function readIt(filename) {
    return {
        filename: filename,
        code: fs.readFileSync(filename, 'utf-8')
    }
}
function toAst(config) {
    try {
        return esprima.parse(config.code)
    } catch (err) {
        console.error(config.filename + ': invalid code, make sure there are no syntax errors!')
        process.exit(1)
    }
}
function toCode(ast) {
    return escodegen.generate(ast)
}
function prefixLines(str, prefix) {
    return _.map(str.split('\n'), function(s) {
        return prefix + s
    }).join('\n')
}
function repeatStr(str, count) {
    return _.map(_.range(count), function() {
        return str
    }).join('')
}
